import { io } from "socket.io-client"
import readline from 'readline'

// T·∫°o interface ƒë·ªÉ nh·∫≠p t·ª´ b√†n ph√≠m
const rl = readline.createInterface({
    input: process.stdin,
    output: process.stdout
});

// K·∫øt n·ªëi socket
const socket = io("http://localhost:8017")

// Bi·∫øn l∆∞u tr·∫°ng th√°i
let currentRoom = null;
let username = null;

// X·ª≠ l√Ω k·∫øt n·ªëi
socket.on("connect", () => {
    console.log("‚úÖ Connected:", socket.id)

    // Nh·∫≠p t√™n ng∆∞·ªùi d√πng
    rl.question('Nh·∫≠p t√™n ng∆∞·ªùi d√πng: ', (name) => {
        username = name || 'Kh√°ch ' + Math.floor(Math.random() * 1000);
        console.log(`Xin ch√†o ${username}!`);
        showCommands();
    });
});

// X·ª≠ l√Ω ng·∫Øt k·∫øt n·ªëi
socket.on("disconnect", () => {
    console.log("‚ùå Disconnected")
});

// C√°c s·ª± ki·ªán t·ª´ server

// Khi tham gia ph√≤ng th√†nh c√¥ng
socket.on('room-joined', (data) => {
    console.log(`‚úÖ ƒê√£ tham gia ph√≤ng ${data.roomId}`);
    currentRoom = data.roomId;
});

// Khi c√≥ ng∆∞·ªùi m·ªõi tham gia
socket.on('user-joined', (data) => {
    console.log(`üëã ${data.username} ƒë√£ tham gia ph√≤ng`);
});

// Khi c√≥ ng∆∞·ªùi r·ªùi ph√≤ng
socket.on('user-left', (data) => {
    console.log(`üëã Ng∆∞·ªùi d√πng ${data.userId} ƒë√£ r·ªùi ph√≤ng`);
});

// Khi nh·∫≠n ƒë∆∞·ª£c tin nh·∫Øn m·ªõi
socket.on('new-message', (data) => {
    const sender = data.sender?.username || data.userId;
    console.log(`üí¨ ${sender}: ${data.content}`);
});

// Khi nh·∫≠n ƒë∆∞·ª£c danh s√°ch ng∆∞·ªùi d√πng
socket.on('room-users', (data) => {
    console.log('üë• Danh s√°ch ng∆∞·ªùi d√πng trong ph√≤ng:');
    data.users.forEach((user) => {
        console.log(`  - ${user.username || user.userId}`);
    });
});

// Khi nh·∫≠n ƒë∆∞·ª£c danh s√°ch tin nh·∫Øn
socket.on('room-messages', (data) => {
    console.log('üìú L·ªãch s·ª≠ tin nh·∫Øn:');
    if (data.messages.length === 0) {
        console.log('  Ch∆∞a c√≥ tin nh·∫Øn n√†o.');
    } else {
        data.messages.forEach((msg) => {
            const sender = msg.sender?.username || msg.userId;
            console.log(`  ${sender}: ${msg.content}`);
        });
    }
});

// X·ª≠ l√Ω l·ªói
socket.on('error', (error) => {
    console.error('‚ùå L·ªói:', error.message);
});

// Hi·ªÉn th·ªã danh s√°ch l·ªánh
function showCommands() {
    console.log('\nüìã Danh s√°ch l·ªánh:');
    console.log('  /join [roomId] - Tham gia ph√≤ng chat');
    console.log('  /leave - R·ªùi ph√≤ng chat hi·ªán t·∫°i');
    console.log('  /users - Xem danh s√°ch ng∆∞·ªùi d√πng trong ph√≤ng');
    console.log('  /history - Xem l·ªãch s·ª≠ tin nh·∫Øn');
    console.log('  /exit - Tho√°t');
    console.log('  Tin nh·∫Øn b√¨nh th∆∞·ªùng s·∫Ω ƒë∆∞·ª£c g·ª≠i ƒë·∫øn ph√≤ng hi·ªán t·∫°i');
    console.log('----------------------------------------');

    processInput();
}

// X·ª≠ l√Ω nh·∫≠p li·ªáu
function processInput() {
    rl.question('> ', (input) => {
        // X·ª≠ l√Ω c√°c l·ªánh
        if (input.startsWith('/join')) {
            const roomId = input.split(' ')[1] || 'default-room';
            socket.emit('join-room', { roomId, username });
        } else if (input === '/leave') {
            if (currentRoom) {
                socket.emit('leave-room', { roomId: currentRoom });
                console.log(`ƒê√£ r·ªùi ph√≤ng ${currentRoom}`);
                currentRoom = null;
            } else {
                console.log('B·∫°n ch∆∞a tham gia ph√≤ng chat n√†o.');
            }
        } else if (input === '/users') {
            if (currentRoom) {
                socket.emit('get-room-users', { roomId: currentRoom });
            } else {
                console.log('B·∫°n ch∆∞a tham gia ph√≤ng chat n√†o.');
            }
        } else if (input === '/history') {
            if (currentRoom) {
                socket.emit('get-messages', { roomId: currentRoom, limit: 20 });
            } else {
                console.log('B·∫°n ch∆∞a tham gia ph√≤ng chat n√†o.');
            }
        } else if (input === '/exit') {
            console.log('T·∫°m bi·ªát!');
            socket.disconnect();
            rl.close();
            process.exit(0);
        } else if (input === '/help') {
            showCommands();
        } else {
            // G·ª≠i tin nh·∫Øn th√¥ng th∆∞·ªùng
            if (currentRoom) {
                socket.emit('send-message', { roomId: currentRoom, message: input });
            } else {
                console.log('B·∫°n c·∫ßn tham gia ph√≤ng chat tr∆∞·ªõc (/join [roomId]).');
            }
        }

        // Ti·∫øp t·ª•c nh·∫≠n input n·∫øu ch∆∞a tho√°t
        if (input !== '/exit') {
            processInput();
        }
    });
}

console.log('üöÄ Chat Client kh·ªüi ƒë·ªông...');
